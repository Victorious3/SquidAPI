/*******************************************************************************
 * Copyright (c) 2015 CoolSquid.
 * All rights reserved.
 *******************************************************************************/
package coolsquid.squidapi;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;

import net.minecraft.client.Minecraft;
import net.minecraft.command.ICommand;
import net.minecraft.potion.Potion;
import net.minecraft.util.EnumChatFormatting;
import net.minecraftforge.client.ClientCommandHandler;
import net.minecraftforge.common.ForgeVersion;
import net.minecraftforge.common.ForgeVersion.Status;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.common.config.Configuration;
import net.minecraftforge.oredict.OreDictionary.OreRegisterEvent;

import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;

import coolsquid.squidapi.command.CommandAbout;
import coolsquid.squidapi.command.CommandDisable;
import coolsquid.squidapi.command.CommandEnable;
import coolsquid.squidapi.command.CommandLightningStrike;
import coolsquid.squidapi.command.CommandSquidAPI;
import coolsquid.squidapi.command.CommandSuggest;
import coolsquid.squidapi.config.ModConfigHandler;
import coolsquid.squidapi.exception.SquidAPIException;
import coolsquid.squidapi.handlers.CommonHandler;
import coolsquid.squidapi.handlers.DevEnvironmentEventHandler;
import coolsquid.squidapi.handlers.ExplosionRecipeHandler;
import coolsquid.squidapi.handlers.ModEventHandler;
import coolsquid.squidapi.handlers.MonetizationHandler;
import coolsquid.squidapi.helpers.IdHelper;
import coolsquid.squidapi.helpers.OreDictionaryHelper;
import coolsquid.squidapi.helpers.VillageHelper;
import coolsquid.squidapi.helpers.server.ServerHelper;
import coolsquid.squidapi.helpers.server.chat.ChatMessage;
import coolsquid.squidapi.reflection.ReflectionHelper;
import coolsquid.squidapi.registry.DamageSourceRegistry;
import coolsquid.squidapi.registry.VanillaBlockRegistry;
import coolsquid.squidapi.registry.VanillaItemRegistry;
import coolsquid.squidapi.registry.WorldTypeRegistry;
import coolsquid.squidapi.util.ContentRemover;
import coolsquid.squidapi.util.EasterEggUtils;
import coolsquid.squidapi.util.MiscLib;
import coolsquid.squidapi.util.ModInfo;
import coolsquid.squidapi.util.ModManager;
import coolsquid.squidapi.util.RewardManager;
import coolsquid.squidapi.util.ShutdownHandler;
import coolsquid.squidapi.util.ShutdownHandler.ShutdownEvent;
import coolsquid.squidapi.util.Utils;
import coolsquid.squidapi.util.VersionChecker;
import cpw.mods.fml.common.FMLCommonHandler;
import cpw.mods.fml.common.Loader;
import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.Mod.EventHandler;
import cpw.mods.fml.common.Mod.Instance;
import cpw.mods.fml.common.ModContainer;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.Optional;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLLoadCompleteEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.event.FMLServerStartingEvent;
import cpw.mods.fml.common.eventhandler.SubscribeEvent;
import cpw.mods.fml.common.gameevent.PlayerEvent.PlayerLoggedInEvent;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;

@Mod(modid = ModInfo.modid, name = ModInfo.name, version = ModInfo.version, dependencies = ModInfo.dependencies, acceptableRemoteVersions = "*")
public class SquidAPI extends SquidAPIMod {

	public SquidAPI() {
		super("An API for all my mods.", "227345");
	}

	@Instance
	private static SquidAPI instance;

	public static SquidAPI instance() {
		return instance;
	}

	private final Configuration commandConfig = new Configuration(new File("./config/SquidAPI/commands.cfg"));

	@EventHandler
	public void preInit(FMLPreInitializationEvent event) {
		this.startTiming();
		this.info("Preinitializing.");
		this.info("Version id: ", this.hash(), ".");
		this.info("File hash: ", SquidAPIPlugin.getHash(), ".");

		VanillaBlockRegistry.instance();
		VanillaItemRegistry.instance();

		CommonHandler.instance().init();

		Runtime.getRuntime().addShutdownHook(new ShutdownHandler());

		new ModConfigHandler(event.getSuggestedConfigurationFile()).preInit();

		ModMetadata mcmeta = Loader.instance().getMinecraftModContainer().getMetadata();
		mcmeta.autogenerated = false;
		mcmeta.url = "https://minecraft.net/";
		mcmeta.authorList.add("Mojang");
		mcmeta.description = "A game about breaking and placing blocks.";

		if (MiscLib.DEV_ENVIRONMENT || MiscLib.SETTINGS.getBoolean("cleanMenu")) {
			ReflectionHelper.in(ForgeVersion.class).field("status", "status").set(Status.UP_TO_DATE);
			ReflectionHelper.in(FMLCommonHandler.instance()).field("brandings", "brandings").set(Lists.newArrayList());
			ReflectionHelper.in(FMLCommonHandler.instance()).field("brandingsNoMC", "brandingsNoMC").set(Lists.newArrayList());
		}
		String branding = MiscLib.SETTINGS.getProperty("branding");
		if (!branding.equals("")) {
			ReflectionHelper.in(FMLCommonHandler.instance()).field("brandings", "brandings").set(Lists.newArrayList(branding));
			ReflectionHelper.in(FMLCommonHandler.instance()).field("brandingsNoMC", "brandingsNoMC").set(Lists.newArrayList(branding));
		}

		if (!Loader.isModLoaded("DragonAPI")) {
			this.info("Setting the max potion id to 256.");
			try {
				Potion.potionTypes = Arrays.copyOf(Potion.potionTypes, 256);
			} catch (IllegalAccessError e) {
				throw new SquidAPIException("JarZip!");
			}
		}

		MinecraftForge.EVENT_BUS.register(this);

		for (SquidAPIMod mod: ModManager.INSTANCE.getMods()) {
			mod.preInit();
		}

		MiscLib.LOGGER.info("Preinitialization took ", this.stopTiming(), "ms.");
		this.info("Finished preinitialization.");
	}

	@EventHandler
	public void init(FMLInitializationEvent event) {
		this.startTiming();
		this.info("Initializing.");

		FMLCommonHandler.instance().bus().register(this);
		ModEventHandler handler = new ModEventHandler();
		FMLCommonHandler.instance().bus().register(handler);
		MinecraftForge.EVENT_BUS.register(handler);
		MinecraftForge.EVENT_BUS.register(new ExplosionRecipeHandler());
		if (MiscLib.DEV_ENVIRONMENT) {
			MinecraftForge.EVENT_BUS.register(new DevEnvironmentEventHandler());
		}
		if (!MiscLib.CLIENT) {
			MinecraftForge.EVENT_BUS.register(new MonetizationHandler(ModManager.INSTANCE.getModids()));
		}

		this.suggestMod("SquidUtils", "It provides the user with many customization options, from disabling mobs to creating new biomes.", "http://bit.ly/1EB3Y5N");
		this.suggestMod("StarStones", "Meteors!", "http://bit.ly/1EB3Y5N");
		this.suggestMod("FighterMobs", "Gives abilities to certain Vanilla mobs!", "http://bit.ly/1EB3Y5N");
		this.suggestMod("SafeChat", "Filters swearwords from the chat. Perfect for family servers!", "http://bit.ly/1EB3Y5N");

		Utils.runVersionCheckerCompat("227345");

		for (SquidAPIMod mod: ModManager.INSTANCE.getMods()) {
			mod.init();
		}

		if (EasterEggUtils.APRIL_FOOLS) {
			List<String> descs = Lists.newArrayList();
			for (ModContainer mod: Loader.instance().getModList()) {
				String desc = mod.getMetadata().description;
				if (desc != null) {
					descs.add(desc);
				}
			}
			for (ModContainer mod: Loader.instance().getModList()) {
				mod.getMetadata().description = descs.remove(Utils.getRandInt(0, descs.size() - 1));
			}
		}
		else if (EasterEggUtils.EASTER) {
			this.getMetadata().credits = "The Easter Bunny <3";
		}
		else if (EasterEggUtils.HALLOWEEN) {
			this.info("Happy halloween... >:)");
			this.info("If you want to experience a halloween filled with horror, try out BloodNBones by Eyamapple (Eyamaz)!");
		}

		MiscLib.LOGGER.info("Initialization took " + this.stopTiming() + "ms.");
		this.info("Finished initialization.");
	}

	@EventHandler
	public void postInit(FMLPostInitializationEvent event) {
		this.startTiming();
		this.info("Postinitializing.");

		ContentRemover.removeContent();
		IdHelper.saveIds();
		IdHelper.checkForConflicts();

		WorldTypeRegistry.instance();
		DamageSourceRegistry.INSTANCE.init();

		for (SquidAPIMod mod: ModManager.INSTANCE.getMods()) {
			mod.postInit();
		}

		MiscLib.LOGGER.info("Postinitialization took " + this.stopTiming() + "ms.");
		this.info("Finished postinitialization.");
	}

	@EventHandler
	public void finishedLoading(FMLLoadCompleteEvent event) {
		if (!VillageHelper.professionstoremove.isEmpty()) {
			MinecraftForge.EVENT_BUS.register(new VillageHelper());
		}
		if (MiscLib.CLIENT) {
			this.registerClientCommand(new CommandDisable());
			this.registerClientCommand(new CommandEnable());
			this.registerClientCommand(new CommandAbout());
			this.registerClientCommand(new CommandSquidAPI());
			this.registerClientCommand(new CommandSuggest());
		}
	}

	public final ArrayList<ICommand> commands = new ArrayList<ICommand>();

	@EventHandler
	public void serverLoad(FMLServerStartingEvent event) {
		for (ICommand a: this.commands) {
			this.registerServerCommand(a);
		}
		if (this.commandConfig.hasChanged()) {
			this.commandConfig.save();
		}
	}

	public final List<String> messages = Lists.newArrayList();

	@SideOnly(Side.CLIENT)
	@SubscribeEvent
	public void onLogin(PlayerLoggedInEvent event) {
		VersionChecker.INSTANCE.onLogin(event.player);
		for (String message: this.messages) {
			event.player.addChatMessage(new ChatMessage("<SquidAPI> ").setColor(EnumChatFormatting.RED).appendSibling(new ChatMessage(message)));
		}
		if (MiscLib.DEV_ENVIRONMENT || RewardManager.INSTANCE.isPatreon(event.player.getGameProfile().getId())) {
			this.registerClientCommand(new CommandLightningStrike());
		}
		if (this.commandConfig.hasChanged()) {
			this.commandConfig.save();
		}
	}

	private final Set<String> oredictEntriesToRemove = ImmutableSet.of("greggy_greg_do_please_kindly_stuff_a_sock_in_it");

	@Optional.Method(modid = "MineFactoryReloaded|CompatIC2")
	@SubscribeEvent
	public void onOredictRegistration(OreRegisterEvent event) {
		if (this.oredictEntriesToRemove.contains(event.Name)) {
			OreDictionaryHelper.removeEntry(event.Name);
		}
	}

	@SideOnly(Side.CLIENT)
	@SubscribeEvent
	public void onShutdown(ShutdownEvent event) {
		if (Utils.getChance(1, 10)) {
			this.info("Have a nice day!");
		}
		String user = Minecraft.getMinecraft().getSession().getUsername();
		if (MiscLib.NICKNAMES.containsKey(user) && MiscLib.SETTINGS.getBoolean("easterEggs")) {
			this.info("Bye, " + MiscLib.NICKNAMES.getProperty(user) + "!");
		}
	}

	public void registerCommands(ICommand... commands) {
		for (ICommand command: commands) {
			this.commands.add(command);
		}
	}

	private void registerClientCommand(ICommand command) {
		String name = command.getCommandName();
		if (this.commandConfig.get(name, "enabled", true).getBoolean()) {
			ClientCommandHandler.instance.registerCommand(command);
			this.info("Registering clientside command ", name, ".");
		}
	}

	private void registerServerCommand(ICommand command) {
		String name = command.getCommandName();
		if (name != null && this.commandConfig.get(name, "enabled", true).getBoolean()) {
			ServerHelper.registerCommand(command);
			this.info("Registering serverside command ", name, ".");
		}
	}
}