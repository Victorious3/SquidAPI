/*******************************************************************************
 * Copyright (c) 2015 CoolSquid.
 * All rights reserved.
 *******************************************************************************/
package coolsquid.squidapi;

import java.io.File;
import java.net.URL;
import java.util.List;
import java.util.Set;

import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;

import coolsquid.squidapi.command.CommandDisable;
import coolsquid.squidapi.logging.ILogger;
import coolsquid.squidapi.util.Incompatibility;
import coolsquid.squidapi.util.Incompatibility.Severity;
import coolsquid.squidapi.util.IntUtils;
import coolsquid.squidapi.util.MiscLib;
import coolsquid.squidapi.util.ModManager;
import coolsquid.squidapi.util.StringUtils;
import coolsquid.squidapi.util.Suggestion;
import coolsquid.squidapi.util.SuggestionManager;
import coolsquid.squidapi.util.TimedClass;
import coolsquid.squidapi.util.VersionChecker;
import coolsquid.squidapi.util.io.WebUtils;
import cpw.mods.fml.common.Loader;
import cpw.mods.fml.common.ModContainer;
import cpw.mods.fml.common.ModMetadata;

public class SquidAPIMod extends TimedClass implements ILogger {

	private final ModContainer mod;
	private final Set<Incompatibility> incompatibilities = Sets.newHashSet();
	private final File configFile;
	public final Logger logger;
	private final int hashCode;
	private URL curseUrl;
	private final String curseId;

	public SquidAPIMod(String desc) {
		this(desc, Lists.newArrayList("CoolSquid"), "", "http://coolsquid.wix.com/software", null);
	}

	public SquidAPIMod(String desc, String curseId) {
		this(desc, Lists.newArrayList("CoolSquid"), "", "http://coolsquid.wix.com/software", curseId);
	}

	public SquidAPIMod(String desc, List<String> authors, String credits, String url) {
		this(desc, authors, credits, url, null);
	}

	public SquidAPIMod(String desc, List<String> authors, String credits, String url, String curseId) {
		this.mod = Loader.instance().activeModContainer();

		final int prime = 31;
		int result = 1;
		result = prime * result + this.getModid().hashCode();
		result = prime * result + this.getVersion().hashCode();
		this.hashCode = result;

		this.configFile = new File("./config/" + this.getModid() + ".cfg");
		this.logger = LogManager.getLogger(this.getName());

		this.curseId = curseId;
		if (curseId != null) {
			this.curseUrl = WebUtils.newURL("http://minecraft.curseforge.com/mc-mods/" + curseId + "-" + this.mod.getName() + "/files");
		}
		else {
			this.curseUrl = null;
		}

		ModMetadata meta = this.mod.getMetadata();
		meta.autogenerated = false;
		meta.credits = credits;
		meta.authorList = authors;
		meta.description = desc;

		this.info("Registering SquidAPIMod ", this.getModid(), ".");

		ModManager.INSTANCE.registerMod(this.getModid(), this);
	}

	public final ModContainer getMod() {
		return this.mod;
	}

	public final ModMetadata getMetadata() {
		return this.mod.getMetadata();
	}

	public final String getModid() {
		return this.getMod().getModId();
	}

	public final String getName() {
		return this.mod.getName();
	}

	public final String getVersion() {
		return this.getMod().getVersion();
	}

	public int getVersionAsInt() {
		return IntUtils.parseInt(this.getVersion());
	}

	public final Set<Incompatibility> getIncompatibilities() {
		return ImmutableSet.copyOf(this.incompatibilities);
	}

	protected final void registerIncompatibility(Incompatibility incompatibility) {
		if (Loader.isModLoaded(incompatibility.getModid())) {
			this.incompatibilities.add(incompatibility);
		}
	}

	protected final void registerIncompatibility(String modid, String reason, Severity severity) {
		this.registerIncompatibility(new Incompatibility(modid, reason, severity));
	}

	protected final void suggestMod(Suggestion suggestion) {
		SuggestionManager.INSTANCE.suggestMod(suggestion);
	}

	protected final void suggestMod(String suggestion, String reason, String url) {
		this.suggestMod(suggestion, suggestion, reason, url);
	}

	protected final void suggestMod(String suggestion, String modid, String reason, String url) {
		this.suggestMod(new Suggestion(this.getMod().getModId(), suggestion, modid, reason, url));
	}

	protected final void setDisableable() {
		if (!(this instanceof Disableable)) {
			throw new IllegalArgumentException();
		}
		CommandDisable.disableables.put(this.getMod().getModId(), (Disableable) this);
	}

	public File getConfigFile() {
		return this.configFile;
	}

	public String getCurseId() {
		return this.curseId;
	}

	public URL getCurseUrl() {
		return this.curseUrl;
	}

	public void setCurseUrl(URL url) {
		this.curseUrl = url;
	}

	@Override
	public void log(Level level, Object... msg) {
		String a = StringUtils.newString(msg);
		this.logger.log(level, a);
		MiscLib.LOGGER.log(this.getName(), level, a, false);
	}
	
	@Override
	public void info(Object... msg) {
		this.log(Level.INFO, msg);
	}
	
	@Override
	public void warn(Object... msg) {
		this.log(Level.WARN, msg);
	}
	
	@Override
	public void error(Object... msg) {
		this.log(Level.ERROR, msg);
	}
	
	@Override
	public void fatal(Object... msg) {
		this.log(Level.FATAL, msg);
	}

	public void bigWarning(Object... msg) {
		String a = StringUtils.newString(msg);
		String b = StringUtils.repeat('#', a.length());
		this.log(Level.FATAL, b);
		for (String c: a.split(MiscLib.LINE)) {
			this.log(Level.FATAL, c);
		}
		this.log(Level.FATAL, b);
	}

	protected final void preInit() {
		VersionChecker.INSTANCE.check(this);
	}

	protected final void init() {
		
	}

	protected final void postInit() {
		for (Incompatibility a: this.getIncompatibilities()) {
			this.bigWarning("Incompatibility detected! ", this.mod.getName(), " has issues with ", a.getModid(), ". Reason: ", a.getReason(), ". Severity: ", a.getSeverity(), ".", MiscLib.LINE, "Please contact ", this.mod.getMetadata().getAuthorList(), " for more information.");
		}
	}

	public long hash() {
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		return obj.getClass() == SquidAPIMod.class && this.hashCode() == obj.hashCode();
	}

	@Override
	public String toString() {
		return "SquidAPIMod [modid=" + this.getModid() + ", version=" + this.getVersion() + "]";
	}

	@Override
	public int hashCode() {
		return this.hashCode;
	}

	@Deprecated
	@Override
	public void log(String msg) {
		throw new UnsupportedOperationException();
	}
}